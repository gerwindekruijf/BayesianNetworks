g <- dagitty('dag
{
agePct12t29 [pos="-0.018,0.771"]
medRent [pos="-0.249,-0.185"]
numStreet [pos="0.002,-0.177"]
pctBSorMore [pos="-0.133,-0.389"]
pctLess9thGrade [pos="0.171,-1.181"]
pctNotHSGrad [pos="-0.393,-1.106"]
pctPoliceA [pos="-0.815,-0.223"]
pctPoliceB [pos="-0.649,-0.098"]
pctPoliceH [pos="-1.038,-0.109"]
pctPoliceW [pos="-1.226,-0.245"]
pctUnemployed [pos="0.230,-0.284"]
perCapInc [pos="-0.463,-0.386"]
policeOperBudg [pos="-0.860,0.786"]
racePctA [pos="-0.815,0.164"]
racePctB [pos="-0.634,0.201"]
racePctH [pos="-1.040,0.176"]
racePctW [pos="-1.218,0.196"]
violentCrimes [pos="-0.404,0.788"]
agePct12t29 -> violentCrimes
medRent -> numStreet
medRent -> perCapInc
medRent -> violentCrimes
pctBSorMore -> medRent
pctLess9thGrade -> medRent
pctLess9thGrade -> pctNotHSGrad
pctNotHSGrad -> medRent
pctNotHSGrad -> pctBSorMore
pctUnemployed -> violentCrimes
policeOperBudg -> violentCrimes
racePctA -> violentCrimes
racePctB -> violentCrimes
racePctH -> violentCrimes
racePctW -> violentCrimes
pctLess9thGrade -> numStreet
pctBSorMore -> numStreet
pctNotHSGrad -> numStreet
pctLess9thGrade -> perCapInc
pctBSorMore -> perCapInc
pctNotHSGrad -> perCapInc
pctLess9thGrade -> pctBSorMore
}
')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
View(test_results)
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
communities <- read.csv("D:/Documents/Github/BayesianNetworks/communities.csv", header=FALSE)
View(communities)
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
View(df_2)
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/allEntriesTest.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
install.packages(c("remotes","pROC","naivebayes"))remotes::install_github("jtextor/bayesianNetworks")
install.packages(c("remotes","pROC","naivebayes"))
remotes::install_github("jtextor/bayesianNetworks")
install.packages("dagitty")
install.packages("dagitty")
net <- model2network(toString(g,"bnlearn"))
fit <- bn.fit( net,as.data.frame(scale(df_3)) )
fit
library(dagitty)
library(bnlearn)
net <- model2network(toString(g,"bnlearn"))
fit <- bn.fit( net,as.data.frame(scale(df_3)) )
g <- dagitty('dag {
bb="-6.781,-7.29,8.351,9.149"
agePct16t24 [pos="2.670,-4.006"]
medRent [pos="-3.560,-3.600"]
numStreet [pos="-1.121,2.015"]
pctBSorMore [pos="-1.733,-6.248"]
pctNotHSGrad [pos="2.638,-6.531"]
pctPoliceA [pos="7.327,-3.335"]
pctPoliceB [pos="7.422,2.810"]
pctPoliceH [pos="7.084,1.062"]
pctPoliceW [pos="7.158,-1.781"]
pctUnemployed [pos="-0.498,-0.121"]
perCapInc [pos="-4.585,1.327"]
population [pos="-2.958,7.295"]
racePctA [pos="5.965,-3.388"]
racePctB [pos="5.869,3.004"]
racePctH [pos="6.049,1.133"]
racePctW [pos="5.922,-1.039"]
violentCrimes [pos="3.494,7.436"]
agePct16t24 -> medRent
agePct16t24 -> pctUnemployed
agePct16t24 -> perCapInc
agePct16t24 -> violentCrimes
medRent -> numStreet
medRent -> pctUnemployed
numStreet -> violentCrimes
pctBSorMore -> medRent
pctBSorMore -> pctPoliceB
pctBSorMore -> pctPoliceH
pctBSorMore -> pctPoliceW
pctBSorMore -> pctUnemployed
pctBSorMore -> perCapInc
pctNotHSGrad -> medRent
pctNotHSGrad -> numStreet
pctNotHSGrad -> pctPoliceB
pctNotHSGrad -> pctPoliceH
pctNotHSGrad -> pctPoliceW
pctNotHSGrad -> pctUnemployed
pctNotHSGrad -> perCapInc
pctPoliceA -> numStreet
pctPoliceA -> violentCrimes
pctPoliceB -> pctUnemployed
pctPoliceB -> perCapInc
pctPoliceH -> medRent
pctPoliceW -> perCapInc
pctUnemployed -> numStreet
pctUnemployed -> violentCrimes
perCapInc -> medRent
perCapInc -> numStreet
perCapInc -> pctUnemployed
perCapInc -> violentCrimes
population -> medRent
population -> numStreet
population -> pctPoliceB
population -> pctPoliceH
population -> pctPoliceW
population -> perCapInc
population -> racePctA
population -> racePctB
population -> racePctH
population -> racePctW
racePctA -> medRent
racePctA -> numStreet
racePctA -> pctBSorMore
racePctA -> pctNotHSGrad
racePctA -> pctPoliceA
racePctA -> pctUnemployed
racePctA -> perCapInc
racePctA -> violentCrimes
racePctB -> medRent
racePctB -> pctBSorMore
racePctB -> pctNotHSGrad
racePctB -> pctPoliceB
racePctB -> pctUnemployed
racePctB -> perCapInc
racePctB -> violentCrimes
racePctH -> medRent
racePctH -> pctBSorMore
racePctH -> pctNotHSGrad
racePctH -> pctPoliceH
racePctH -> perCapInc
racePctH -> violentCrimes
racePctW -> pctBSorMore
racePctW -> pctNotHSGrad
racePctW -> pctPoliceW
racePctW -> pctUnemployed
racePctW -> perCapInc
racePctW -> violentCrimes
}
')
net <- model2network(toString(g,"bnlearn"))
fit <- bn.fit( net,as.data.frame(scale(df_3)) )
View(df_3)
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
View(df_3)
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
fit
predict(fit,node="violentCrimes", data=data.frame(numStreet=as.double(0.00:1.00)))
predict(fit,node="violentCrimes", data=data.frame(numStreet=as.double(0.00:1.00)), method = "bayes-lw")
predict(fit,node="violentCrimes", data=data.frame(numStreet=as.double(seq(from = 0, to = 1, by = 0.01))), method = "bayes-lw")
predictions <- predict(fit,node="violentCrimes", data=data.frame(numStreet=as.double(seq(from = 0, to = 1, by = 0.01))), method = "bayes-lw")
plot(predictions)
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
predictions <- predict(fit,node="violentCrimes", data=data.frame(racePctB=as.double(seq(from = 0, to = 1, by = 0.01))), method = "bayes-lw")
plot(predictions)
predictions <- predict(fit,node="violentCrimes", data=data.frame(racePctW=as.double(seq(from = 0, to = 1, by = 0.01))), method = "bayes-lw")
plot(predictions)
predictions
net <- model2network(toString(g,"bnlearn"))
fit <- bn.fit( net,as.data.frame(df_3) )
fit
predictions <- predict(fit,node="violentCrimes", data=data.frame(racePctW=as.double(seq(from = 0, to = 1, by = 0.01))), method = "bayes-lw")
plot(predictions)
predictions
predictions <- predict(fit,node="violentCrimes", data=data.frame(medRent=as.double(seq(from = 0, to = 1, by = 0.01))), method = "bayes-lw")
plot(predictions)
predictions
predictions <- predict(fit,node="violentCrimes", data=data.frame(numStreet=as.double(seq(from = 0, to = 1, by = 0.01)), pctUnemployed = as.double(seq(from = 0, to = 1, by = 0.01))), method = "bayes-lw")
plot(predictions)
predictions
checker <- data.frame(numStreet=as.double(seq(from = 0, to = 1, by = 0.01)))
checker
checker <- data.frame(numStreet=as.double(seq(from = 0, to = 1, by = 0.01)), pctUnemployed = as.double(seq(from = 0, to = 1, by = 0.01)))
checker
checker <- data.frame(numStreet=as.double(0.01), pctUnemployed = as.double(seq(from = 0, to = 1, by = 0.01)))
checker
plot(g)
fit
df_wrong <- df_2 - df_3
df_wrong <- df_2[!complete.cases(df_2),]
View(df_wrong)
df_wrong <- subset(df_wrong, select=c("numStreet", "pctUnemployed", "racePctB"))
View(df_wrong)
df_wrong <- df_2[!complete.cases(df_2),]
df_wrong <- subset(df_wrong, select=c("numStreet", "pctUnemployed", "racePctB", "violentCrimes"))
View(df_wrong)
predictions <- predict(fit,node="violentCrimes", data= subset(df_wrong,select = -c("violentCrimes")), method = "bayes-lw")
predictions <- predict(fit,node="violentCrimes", data= subset(df_wrong,select = -"violentCrimes"), method = "bayes-lw")
predictions <- predict(fit,node="violentCrimes", data= subset(df_wrong,select = c("numStreet","pctUnemployed", "racePctB")), method = "bayes-lw")
predictions
MSE <- (df_wrong$violentCrimes - predictions)**(2)/nrow(df_wrong)
MSE
MSE <- sum((df_wrong$violentCrimes - predictions)**(2))/nrow(df_wrong)
MSE
rmse(df_wrong$violentCrimes, predictions)
install.packages(Metrics)
install.packages("Metrics")
rmse(df_wrong$violentCrimes, predictions)
library(Metrics)
rmse(df_wrong$violentCrimes, predictions)
MSE <- sqrt(sum((df_wrong$violentCrimes - predictions)**(2))/nrow(df_wrong))
MSE
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
MSE
predict(fit,node="violentCrimes", data=data.frame(population= as.double(seq(from = 0, to = 0.99, by = 0,01 ))), method = "bayes-lw")
predict(fit,node="violentCrimes", data=data.frame(population= as.double(seq(from = 0, to = 0.99, by = 0.01 ))), method = "bayes-lw")
indirect <- predict(fit,node="violentCrimes", data=data.frame(population= as.double(seq(from = 0, to = 0.99, by = 0.01 ))), method = "bayes-lw")
plot(indirect)
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
MSE
MSE_4
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
plot(perCapInc_predict)
plot(perNotHSGrad_predict)
plot(pctNotHSGrad_predict)
plot(BsorMore_predict)
#plot(population_predict)
#plot(pctNotHSGrad_predict)
plot(pctBsorMore_predict)
plot(medRent_predict)
plot(pctPoliceB_predict)
plot(pctPoliceH_predict)
plot(pctPoliceW_predict)
plot(g)
plot(population_predict)
plot(pctNoptHSGrad_predict)
plot(pctNotHSGrad_predict)
plot(pctPoliceB_predict)
plot(pctPoliceW_predict)
source('D:/Documents/Github/BayesianNetworks/Ass1.R')
fit
